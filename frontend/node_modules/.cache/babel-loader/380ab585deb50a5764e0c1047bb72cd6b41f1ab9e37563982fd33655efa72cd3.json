{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SakthikumarAnbazhaga\\\\Downloads\\\\Leave-Request-System\\\\frontend\\\\src\\\\pages\\\\calendar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimpo;\nconst leaveColors = {\n  Sick: '#fd79a8',\n  // Vibrant Coral Red\n  Casual: '#ffb347',\n  // Warm Soft Orange\n  WorkFromHome: '#6c5ce7',\n  // Vivid Indigo\n  Holiday: '#45aaf2',\n  // Bright Sky Blue\n  Weekend: '#ffeaa7',\n  // Light Pastel Yellow\n  Today: '#00b894',\n  // Fresh Mint Green\n  Multiple: '#ff6b6b',\n  // Neon Pink\n  Unpaid: '#636e72',\n  // Neutral Slate Gray\n  OnDuty: '#00cec9' // Aqua Blue\n};\nconst userLeaves = [{\n  date: '2025-05-06',\n  type: 'Sick',\n  name: 'John Doe'\n}, {\n  date: '2025-05-06',\n  type: 'Casual',\n  name: 'Jane Smith'\n}, {\n  date: '2025-06-16',\n  type: 'WorkFromHome',\n  name: 'Alice Brown'\n}];\nconst holidays = ['2025-05-01', '2025-08-15', '2025-12-25'];\nfunction MonthlyCalendarPage() {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDay, setSelectedDay] = useState(null);\n  const month = currentDate.getMonth();\n  const year = currentDate.getFullYear();\n  const getDaysInMonth = (year, month) => {\n    const date = new Date(year, month, 1);\n    const days = [];\n    const firstDay = date.getDay();\n    const totalDays = new Date(year, month + 1, 0).getDate();\n    for (let i = 0; i < firstDay; i++) {\n      days.push(null);\n    }\n    for (let d = 1; d <= totalDays; d++) {\n      const fullDate = new Date(year, month, d + 1);\n      const dateStr = fullDate.toISOString().split('T')[0];\n      console.log(typeof dateStr, typeof fullDate, typeof Date());\n      console.log(dateStr, fullDate, Date());\n      const isWeekend = fullDate.getDay() === 1 || fullDate.getDay() === 0;\n      const isHoliday = holidays.includes(dateStr);\n      const leaves = userLeaves.filter(leave => leave.date === dateStr && !isHoliday && !isWeekend);\n      let color = leaveColors.Default;\n      if (leaves.length == 1) color = leaveColors[leaves[0].type];else if (leaves.length > 1) color = leaveColors.Multiple;else if (isHoliday) color = leaveColors.Holiday;else if (isWeekend) color = leaveColors.Weekend;\n      if (dateStr == new Date().toISOString().split('T')[0]) color = leaveColors.Today;\n      days.push({\n        date: dateStr,\n        label: d,\n        isHoliday,\n        isWeekend,\n        leaves,\n        color\n      });\n    }\n    return days;\n  };\n  const handlePrevMonth = () => {\n    setCurrentDate(new Date(year, month - 1, 1));\n  };\n  const handleNextMonth = () => {\n    setCurrentDate(new Date(year, month + 1, 1));\n  };\n  const days = getDaysInMonth(year, month);\n  console.log(days);\n  const monthName = currentDate.toLocaleString('default', {\n    month: 'long'\n  });\n  return (\n    /*#__PURE__*/\n    // <div className=\"calendar-container\">\n    //   <div className=\"calendar-header\">\n    //     <button onClick={handlePrevMonth}>&larr;</button>\n    //     <h2>{monthName} {year}</h2>\n    //     <button onClick={handleNextMonth}>&rarr;</button>\n    //   </div>\n    //   <div className=\"calendar-grid\">\n    //     {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((d, i) => (\n    //       <div key={i} className=\"calendar-day-name\">{d}</div>\n    //     ))}\n    //     {days.map((day, idx) => (\n    //       <div\n    //         key={idx}\n    //         className=\"calendar-cell\"\n    //         style={{ backgroundColor: day?.color || 'transparent' }}\n    //         onClick={() => day && setSelectedDay(day)}\n    //       >\n    //         {day ? day.label : ''}\n    //       </div>\n    //     ))}\n    //   </div>\n    //   <div className=\"calendar-legend\">\n    //     {Object.entries(leaveColors).map(([type, color]) => (\n    //       <span key={type}>\n    //         <span className=\"legend-color\" style={{ background: color }}></span> {type}\n    //       </span>\n    //     ))}\n    //   </div>\n    //   {selectedDay && (\n    //     <div className=\"day-details\">\n    //       <h3>Details for {selectedDay.date}</h3>\n    //       {selectedDay.leaves.length > 0 ? (\n    //         <ul>\n    //           {selectedDay.leaves.map((leave, i) => (\n    //             <li key={i}><strong>{leave.name}</strong> - {leave.type} Leave</li>\n    //           ))}\n    //         </ul>\n    //       ) : selectedDay.isHoliday ? (\n    //         <p>This day is a public holiday.</p>\n    //       ) : selectedDay.isWeekend ? (\n    //         <p>This day is a weekend.</p>\n    //       ) : (\n    //         <p>No leaves taken on this day.</p>\n    //       )}\n    //       <button onClick={() => setSelectedDay(null)}>Close</button>\n    //     </div>\n    //   )}\n    // </div>\n    _jsxDEV(Fun, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(MonthlyCalendarPage, \"V7zoMsOcBBm5B/dlGDpQk/kE1xw=\");\n_c = MonthlyCalendarPage;\nexport default MonthlyCalendarPage;\nvar _c;\n$RefreshReg$(_c, \"MonthlyCalendarPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","impo","leaveColors","Sick","Casual","WorkFromHome","Holiday","Weekend","Today","Multiple","Unpaid","OnDuty","userLeaves","date","type","name","holidays","MonthlyCalendarPage","_s","currentDate","setCurrentDate","Date","selectedDay","setSelectedDay","month","getMonth","year","getFullYear","getDaysInMonth","days","firstDay","getDay","totalDays","getDate","i","push","d","fullDate","dateStr","toISOString","split","console","log","isWeekend","isHoliday","includes","leaves","filter","leave","color","Default","length","label","handlePrevMonth","handleNextMonth","monthName","toLocaleString","Fun","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SakthikumarAnbazhaga/Downloads/Leave-Request-System/frontend/src/pages/calendar.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimpo\r\n\r\nconst leaveColors = {\r\n  Sick: '#fd79a8',          // Vibrant Coral Red\r\n  Casual: '#ffb347',        // Warm Soft Orange\r\n  WorkFromHome: '#6c5ce7',  // Vivid Indigo\r\n  Holiday: '#45aaf2',       // Bright Sky Blue\r\n  Weekend: '#ffeaa7',       // Light Pastel Yellow\r\n  Today: '#00b894',         // Fresh Mint Green\r\n  Multiple: '#ff6b6b',      // Neon Pink\r\n  Unpaid: '#636e72',        // Neutral Slate Gray\r\n  OnDuty: '#00cec9'         // Aqua Blue\r\n};\r\n\r\nconst userLeaves = [\r\n  { date: '2025-05-06', type: 'Sick', name: 'John Doe' },\r\n  { date: '2025-05-06', type: 'Casual', name: 'Jane Smith' },\r\n  { date: '2025-06-16', type: 'WorkFromHome', name: 'Alice Brown' },\r\n];\r\n\r\nconst holidays = [\r\n  '2025-05-01',\r\n  '2025-08-15',\r\n  '2025-12-25',\r\n];\r\n\r\nfunction MonthlyCalendarPage() {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [selectedDay, setSelectedDay] = useState(null);\r\n\r\n  const month = currentDate.getMonth();\r\n  const year = currentDate.getFullYear();\r\n\r\n  const getDaysInMonth = (year, month) => {\r\n    const date = new Date(year, month, 1);\r\n    const days = [];\r\n    const firstDay = date.getDay();\r\n    const totalDays = new Date(year, month + 1, 0).getDate();\r\n\r\n    for (let i = 0; i < firstDay; i++) {\r\n      days.push(null);\r\n    }\r\n\r\n    for (let d = 1; d <= totalDays; d++) {\r\n      const fullDate = new Date(year, month, d+1);\r\n      const dateStr = fullDate.toISOString().split('T')[0];\r\n      console.log(typeof(dateStr),typeof(fullDate),typeof(Date()))\r\n      console.log(dateStr,fullDate,Date(),)\r\n      const isWeekend = fullDate.getDay() === 1 || fullDate.getDay() === 0;\r\n      const isHoliday = holidays.includes(dateStr);\r\n      const leaves = userLeaves.filter(\r\n        (leave) => leave.date === dateStr && !isHoliday && !isWeekend\r\n      );\r\n\r\n      let color = leaveColors.Default;\r\n      if (leaves.length == 1) color = leaveColors[leaves[0].type];\r\n      else if(leaves.length > 1) color = leaveColors.Multiple;\r\n      else if (isHoliday) color = leaveColors.Holiday;\r\n      else if (isWeekend) color = leaveColors.Weekend;\r\n      if(dateStr == new Date().toISOString().split('T')[0]) color = leaveColors.Today;\r\n\r\n      days.push({\r\n        date: dateStr,\r\n        label: d,\r\n        isHoliday,\r\n        isWeekend,\r\n        leaves,\r\n        color,\r\n      });\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  const handlePrevMonth = () => {\r\n    setCurrentDate(new Date(year, month - 1, 1));\r\n  };\r\n\r\n  const handleNextMonth = () => {\r\n    setCurrentDate(new Date(year, month + 1, 1));\r\n  };\r\n\r\n  const days = getDaysInMonth(year, month);\r\n  console.log(days);\r\n  const monthName = currentDate.toLocaleString('default', { month: 'long' });\r\n\r\n  return (\r\n    // <div className=\"calendar-container\">\r\n    //   <div className=\"calendar-header\">\r\n    //     <button onClick={handlePrevMonth}>&larr;</button>\r\n    //     <h2>{monthName} {year}</h2>\r\n    //     <button onClick={handleNextMonth}>&rarr;</button>\r\n    //   </div>\r\n\r\n    //   <div className=\"calendar-grid\">\r\n    //     {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((d, i) => (\r\n    //       <div key={i} className=\"calendar-day-name\">{d}</div>\r\n    //     ))}\r\n\r\n    //     {days.map((day, idx) => (\r\n    //       <div\r\n    //         key={idx}\r\n    //         className=\"calendar-cell\"\r\n    //         style={{ backgroundColor: day?.color || 'transparent' }}\r\n    //         onClick={() => day && setSelectedDay(day)}\r\n    //       >\r\n    //         {day ? day.label : ''}\r\n    //       </div>\r\n    //     ))}\r\n    //   </div>\r\n\r\n    //   <div className=\"calendar-legend\">\r\n    //     {Object.entries(leaveColors).map(([type, color]) => (\r\n    //       <span key={type}>\r\n    //         <span className=\"legend-color\" style={{ background: color }}></span> {type}\r\n    //       </span>\r\n    //     ))}\r\n    //   </div>\r\n\r\n    //   {selectedDay && (\r\n    //     <div className=\"day-details\">\r\n    //       <h3>Details for {selectedDay.date}</h3>\r\n    //       {selectedDay.leaves.length > 0 ? (\r\n    //         <ul>\r\n    //           {selectedDay.leaves.map((leave, i) => (\r\n    //             <li key={i}><strong>{leave.name}</strong> - {leave.type} Leave</li>\r\n    //           ))}\r\n    //         </ul>\r\n    //       ) : selectedDay.isHoliday ? (\r\n    //         <p>This day is a public holiday.</p>\r\n    //       ) : selectedDay.isWeekend ? (\r\n    //         <p>This day is a weekend.</p>\r\n    //       ) : (\r\n    //         <p>No leaves taken on this day.</p>\r\n    //       )}\r\n    //       <button onClick={() => setSelectedDay(null)}>Close</button>\r\n    //     </div>\r\n    //   )}\r\n    // </div>\r\n    < Fun />\r\n  );\r\n}\r\n\r\nexport default MonthlyCalendarPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}